function std {
  export UPSIDE_ACCESS_TOKEN="$(td)"
  export UPSIDE_ACCESS_TOKEN_ENV="development"
}

function stp {
  export UPSIDE_ACCESS_TOKEN="$(tp)"
  export UPSIDE_ACCESS_TOKEN_ENV="production"
}

function ggrbm {
  ggpm && git checkout - && grbi "$(git_main_branch)"
}

function ggc_cr {
  GIT_SSH_COMMAND='ssh -i ~/.ssh/id_ed25519-kfcodereviewer -o IdentitiesOnly=yes' git clone "$@"
}

function venv_purge {
  pyenv uninstall --force "$(pyenv local)" && rm .venv .python-version
}

function fa {
  alias | grep "${@}"
}

function pr_arr {
  array="$1"
  printf '%s\n' "${array[@]}"
}

function ls_path {
  IFS=':' read -rA PATH_LINES <<< "$PATH"

  for LINE in "${PATH_LINES[@]}"; do echo "$LINE"; done
}


function auth_policy_for_user {
  # check if first argument provided
  [[ -z "$1" ]] && echo "No email or user resource provided" && exit 1

  COMMAND_USERNAME="$1"

  if [[ "$COMMAND_USERNAME" =~ ^.+@.+$ ]]; then
    USER_POLICY="$(upside-auth-user-summary-by-email "$(te)" "$COMMAND_USERNAME" no | jq -r '.policyAssignments[0][20:]')"
  else
    USER_POLICY="$(upside-auth-user-summary "$(te)" "$COMMAND_USERNAME" no | jq -r '.policyAssignments[0][20:]')"
  fi

  upside-auth-managed-policy-describe "$(te)" "$USER_POLICY" no | jq '.'
}

