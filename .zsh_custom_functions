function std {
  export UPSIDE_ACCESS_TOKEN="$(td)"
  export UPSIDE_ACCESS_TOKEN_ENV="development"
}

function stp {
  export UPSIDE_ACCESS_TOKEN="$(tp)"
  export UPSIDE_ACCESS_TOKEN_ENV="production"
}

function ggrbm {
  ggpm && git checkout - && grbi "$(git_main_branch)"
}

function ggc_cr {
  GIT_SSH_COMMAND='ssh -i ~/.ssh/id_ed25519-kfcodereviewer -o IdentitiesOnly=yes' git clone "$@"
}

function venv_purge {
  pyenv uninstall --force "$(pyenv local)" && rm .venv .python-version
}

function fa {
  alias | grep "${@}"
}

function pr_arr {
  array="$1"
  printf '%s\n' "${array[@]}"
}

function ls_path {
  IFS=':' read -rA PATH_LINES <<< "$PATH"

  for LINE in "${PATH_LINES[@]}"; do echo "$LINE"; done
}


function auth_policy_for_user {
  # check if first argument provided
  [[ -z "$1" ]] && echo "No email or user resource provided" && exit 1

  COMMAND_USERNAME="$1"

  if [[ "$COMMAND_USERNAME" =~ ^.+@.+$ ]]; then
    USER_POLICY="$(upside-auth-user-summary-by-email "$(te)" "$COMMAND_USERNAME" no | jq -r '.policyAssignments[0][20:]')"
  else
    USER_POLICY="$(upside-auth-user-summary "$(te)" "$COMMAND_USERNAME" no | jq -r '.policyAssignments[0][20:]')"
  fi

  upside-auth-managed-policy-describe "$(te)" "$USER_POLICY" no | jq '.'
}

function ggprc {
  TITLE="${1:-$(git log --pretty=format:%s | head -1)}"
  BODY=${2:-""}

  gh pr create --reviewer upside-energy/funky-gibbons --title "$TITLE" --draft --body "$BODY"
}

function publish {
  RED='\033[0;31m'
  BLUE='\033[0;36m'
  GREEN='\033[0;32m'
  NC='\033[0m'

  function updateStatus {
    STATUS=$(aws codebuild batch-get-builds --ids "$BUILD_ID" --profile upside-build-admin | jq -r '.builds[0].buildStatus')
  }

  if [[ ! -f "./publish.sh" ]]; then
    echo "Must be run in a directory with publish.sh"
  fi

  VERSION_BUMP="$1"
  BUILD_ID=$(./publish.sh "$VERSION_BUMP" | jq -r '.build.id')

  ORIGINAL_AWS_PROFILE="$AWS_PROFILE"
  export AWS_PROFILE="upside-build-admin"

  STATUS="IN_PROGRESS"
  while [[ "$STATUS" == "IN_PROGRESS" ]]; do
    printf "${RED}\r%s${NC}" "$STATUS"
    sleep 5
    printf "${BLUE}\r%s${NC}" " CHECKING  "
    updateStatus
  done

  export AWS_PROFILE="$ORIGINAL_AWS_PROFILE"

  printf "${GREEN}\r%s\n${NC}" "$STATUS       "

  git fetch --tags > /dev/null 2>&1

  LIB_PKG_NAME=$(cat setup.py | grep "package_name = " | sed -r 's/.*"(.*)"/\1/g')

  echo -e "${BLUE}Version Published: ${NC}"
  echo -e "${GREEN}$(git tag | grep "$LIB_PKG_NAME" | tail -1)${NC}"
}

function gbrc {
  BRANCH="$(gbc)"
  gcm && gbD "$BRANCH"
}
